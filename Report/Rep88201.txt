OBJECT Report 88201 Procesar Movs. IVA SII
{
  OBJECT-PROPERTIES
  {
    Date=21/08/17;
    Time=12:30:04;
    Modified=Yes;
    Version List=SII;
  }
  PROPERTIES
  {
    ProcessingOnly=Yes;
  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table254;
        DataItemTableView=SORTING(Tipo,Fecha registro,Tipo documento,N§ documento,N§ cliente/proveedor)
                          WHERE(Tipo=FILTER(Compra|Venta));
        OnPreDataItem=BEGIN
                        IF GUIALLOWED THEN
                          Vent.OPEN('Procesando Movs. IVA: #1#######');
                        CambiarEmpresa;
                        IF CfgSII.GET THEN;
                        NumDoc := '';
                        IF (gblDesdeMov <> 0) AND (gblHastaMov <> 0) THEN BEGIN
                          SETCURRENTKEY("N§ mov.");
                          SETRANGE("N§ mov.", gblDesdeMov, gblHastaMov);
                        END ELSE BEGIN
                          TabLinDocus.SETCURRENTKEY("NMov IVA");
                          IF TabLinDocus.FIND('+') THEN
                            SETFILTER("N§ mov.", '>%1', TabLinDocus."NMov IVA");
                        END;

                        IF CfgSII."No procesar 1S 2017" THEN
                          FechaProceso := 010717D
                        ELSE
                          FechaProceso := 010117D;
                        SETFILTER("Fecha registro", '>=%1', FechaProceso);


                        i := 0;
                      END;

        OnAfterGetRecord=VAR
                           TxtError@1000000000 : Text[250];
                           MovIVAAux@1000000001 : Record 254;
                           Salir@1000000002 : Boolean;
                         BEGIN
                           i := i + 1;
                           IF GUIALLOWED THEN
                             Vent.UPDATE(1, i);
                           CLEAR(memIntSII);
                           IF (NumDoc <> "N§ documento") THEN BEGIN
                             IF NumDoc <> '' THEN
                               ComprobarDUA(NMovDoc);


                             NumDoc := "N§ documento";

                             memIntSII.Documento         := "N§ documento";
                             memIntSII.Fecha             := "Fecha registro";
                             memIntSII."Fecha operacion" := "Fecha registro";
                             memIntSII."Fecha documento" := "Document Date";

                             memIntSII."Creation date"   := CogerFechaCreacion("Mov. IVA", FALSE);

                             memIntSII.NumTercero       := "N§ cliente/proveedor";
                             memIntSII."Tipo documento" := "Tipo documento";
                             memIntSII."No enviar"      := CogerNoEnviar("Mov. IVA");

                             memIntSII.DocumentoTercero := "N§ documento externo";

                             IF (Tipo = Tipo::Venta) THEN BEGIN

                               IF BuscarSerieExcluir("Mov. IVA", 0) THEN BEGIN
                                 NumDoc := '';
                                 CurrReport.SKIP;
                               END;
                               memIntSII.TipoSII := memIntSII.TipoSII::E;
                               memIntSII."Clave operacion" := Get_CO_DocEmitido("Mov. IVA", TxtError);
                               IF TxtError <> '' THEN BEGIN
                                 memIntSII."Texto error" := TxtError;
                                 memIntSII."Codigo Error" := '-1';
                               END;
                               IF CLI.GET("N§ cliente/proveedor") THEN BEGIN
                                 memIntSII.NIF := CLI."CIF/NIF";
                                 memIntSII.RazonSocial := CLI.Nombre;
                                 memIntSII."Cod. pais" := CLI."C¢d. pa¡s";
                                 memIntSII."Cod. divisa" := CLI."C¢d. divisa";
                                 memIntSII."Tipo factura" := TipoFactura("Mov. IVA", memIntSII.NIF);
                               END;

                               IF "Tipo documento" = "Tipo documento"::Factura THEN BEGIN
                                 IF FVR.GET("N§ documento") THEN BEGIN
                                   memIntSII.NIF := FVR."CIF/NIF";
                                   memIntSII.RazonSocial := FVR."Fact. a-Nombre";
                                   memIntSII."Cod. divisa" := FVR."C¢d. divisa";
                                   memIntSII."Factor divisa" := FVR."Factor divisa";
                                   memIntSII.NumTercero := FVR."Factura-a N§ cliente";
                                   memIntSII.TextoRegistro := FVR."Texto de registro";
                                   memIntSII."Cod. pais" := FVR."Fact. a-C¢d. pa¡s";
                                   memIntSII."Fecha documento" := FVR."Fecha emisi¢n documento";
                                   memIntSII."Tipo factura" := TipoFactura("Mov. IVA", memIntSII.NIF);
                                   IF CfgSII."Descripcion Factura venta" = CfgSII."Descripcion Factura venta"::"Primera linea documento" THEN BEGIN
                                     FVRLin.SETRANGE("N§ documento", FVR."N§");
                                     CASE CfgSII."Tipo l¡nea factura Venta" OF
                                       CfgSII."Tipo l¡nea factura Venta"::"Sin tipo ":
                                         FVRLin.SETRANGE(Tipo,0 );
                                       CfgSII."Tipo l¡nea factura Venta"::"Con tipo":
                                         FVRLin.SETFILTER(Tipo,'>0' );
                                     END;
                                     IF CfgSII."Con cantidad en factura venta" THEN
                                       FVRLin.SETFILTER(Cantidad,'<>0');
                                     IF FVRLin.FIND('-') THEN
                                       memIntSII.TextoRegistro := FVRLin.Descripci¢n;
                                   END;
                                   IF CfgSII."Descripcion Factura venta" = CfgSII."Descripcion Factura venta"::"N§ documento emitido" THEN
                                     memIntSII.TextoRegistro := 'N§ Documento ' + FVR."N§";
                                 END;
                               END;

                               IF "Tipo documento" = "Tipo documento"::Abono THEN BEGIN
                                 IF AVR.GET("N§ documento") THEN BEGIN
                                   memIntSII.NIF := AVR."CIF/NIF";
                                   memIntSII.RazonSocial := AVR."Fact. a-Nombre";
                                   memIntSII."Cod. divisa" := AVR."C¢d. divisa";
                                   memIntSII."Factor divisa" := AVR."Factor divisa";
                                   memIntSII.NumTercero := AVR."Factura-a N§ cliente";
                                   memIntSII.TextoRegistro := AVR."Texto de registro";
                                   memIntSII."Cod. pais" := AVR."Fact. a-C¢d. pa¡s";
                                   memIntSII."Fecha documento" := AVR."Fecha emisi¢n documento";
                                   memIntSII."Tipo factura" := TipoFactura("Mov. IVA", memIntSII.NIF);
                                   memIntSII."Factura corregida" := AVR."Corrected Invoice No.";
                                   IF CfgSII."Descripcion Abono venta" = CfgSII."Descripcion Abono venta"::"Primera linea documento" THEN BEGIN
                                     AVRLin.SETRANGE("N§ documento", AVR."N§");
                                     CASE CfgSII."Tipo l¡nea abono Venta" OF
                                       CfgSII."Tipo l¡nea abono Venta"::"Sin tipo ":
                                         AVRLin.SETRANGE(Tipo,0 );
                                       CfgSII."Tipo l¡nea abono Venta"::"Con tipo":
                                         AVRLin.SETFILTER(Tipo,'>0' );
                                     END;
                                     IF CfgSII."Con cantidad en abono venta" THEN
                                       AVRLin.SETFILTER(Cantidad,'<>0');
                                     IF AVRLin.FIND('-') THEN
                                       memIntSII.TextoRegistro := AVRLin.Descripci¢n;
                                   END;
                                   IF CfgSII."Descripcion Abono venta" = CfgSII."Descripcion Abono venta"::"N§ documento emitido" THEN
                                     memIntSII.TextoRegistro := 'N§ Documento ' + AVR."N§";
                                   IF (AVR."Corrected Invoice No." <> '') THEN BEGIN
                                     IF FVR.GET(AVR."Corrected Invoice No.") THEN BEGIN
                                       memIntSII."Tipo factura rectificativa" := 'I'; // Por diferencia
                                       IF memIntSII."Tipo factura" = 'F2' THEN
                                         memIntSII."Tipo factura" := 'R5'
                                       ELSE
                                         memIntSII."Tipo factura" := 'R4';
                                       memIntSII."Fecha factura corregida" := FVR."Fecha registro";
                                     END;
                                   END;
                                 END;
                               END;

                               IF "Tipo documento" = "Tipo documento"::"Docs.inter‚s" THEN BEGIN
                                 IF DocIntEmitido.GET("N§ documento") THEN BEGIN
                                   memIntSII.NIF := DocIntEmitido."CIF/NIF";
                                   memIntSII.RazonSocial := DocIntEmitido.Nombre;
                                   memIntSII."Cod. divisa" := DocIntEmitido."C¢d. divisa";
                                   memIntSII.NumTercero := DocIntEmitido."N§ cliente";
                                   memIntSII.TextoRegistro := DocIntEmitido."Texto de registro";
                                   memIntSII."Cod. pais" := DocIntEmitido."C¢d. pa¡s";
                                   memIntSII."Tipo factura" := TipoFactura("Mov. IVA", memIntSII.NIF);
                                   memIntSII."Factura corregida" := '';
                                   IF CfgSII."Descripcion Factura venta" = CfgSII."Descripcion Factura venta"::"Primera linea documento" THEN BEGIN
                                     DocIntEmitidoLin.SETRANGE("N§ documento", DocIntEmitido."N§");
                                     CASE CfgSII."Tipo l¡nea factura Venta" OF
                                       CfgSII."Tipo l¡nea factura Venta"::"Sin tipo ":
                                         DocIntEmitidoLin.SETRANGE(Tipo,0 );
                                       CfgSII."Tipo l¡nea factura Venta"::"Con tipo":
                                         DocIntEmitidoLin.SETFILTER(Tipo,'>0' );
                                     END;
                                     IF CfgSII."Con cantidad en factura venta" THEN
                                       DocIntEmitidoLin.SETFILTER(Importe,'<>0');
                                     IF DocIntEmitidoLin.FIND('-') THEN
                                       memIntSII.TextoRegistro := DocIntEmitidoLin.Descripci¢n;
                                   END;
                                  END;
                               END;

                               IF ("Tipo documento" = "Tipo documento"::Pago) OR
                                  ("Tipo documento" = "Tipo documento"::" ") THEN BEGIN
                                 memIntSII.TipoDocumento := memIntSII.TipoDocumento::Pago;
                                 memIntSII."Tipo factura" := '';
                                 IF "N§ mov. IVA no realizado" <> 0 THEN BEGIN
                                   IF MovIVAAux.GET("N§ mov. IVA no realizado") THEN BEGIN
                                     IF MovIVAAux."Tipo documento" = MovIVAAux."Tipo documento"::Factura THEN BEGIN
                                       IF FVR.GET(MovIVAAux."N§ documento") THEN BEGIN
                                         memIntSII.DocumentoTercero := FVR."N§";
                                         memIntSII."Fecha documento" := FVR."Fecha registro";
                                         NumDoc := '';
                                       END;
                                     END;
                                   END;
                                 END;
                               END;

                               // Comprobar si la serie est  en la configuraci¢n
                               BuscarSerie("Mov. IVA", memIntSII, 0);

                               // Comprobar si el cliente est  en la configuraci¢n
                               BuscarCliente("Mov. IVA", memIntSII);

                               memIntSII."Fecha documento" := CogerFechaDocumento("Mov. IVA", memIntSII."Fecha documento");;

                             END;

                             IF (Tipo = Tipo::Compra) THEN BEGIN

                               IF BuscarSerieExcluir("Mov. IVA", 1) THEN BEGIN
                                 NumDoc := '';
                                 CurrReport.SKIP;
                               END;
                               memIntSII.TipoSII := memIntSII.TipoSII::R;
                               memIntSII."Clave operacion" := Get_CO_DocRecibido("Mov. IVA", TxtError);
                               IF TxtError <> '' THEN BEGIN
                                 memIntSII."Texto error" := TxtError;
                                 memIntSII."Codigo Error" := '-1';
                               END;
                               memIntSII.DocumentoTercero := "Mov. IVA"."N§ documento externo";
                               IF PRO.GET("N§ cliente/proveedor") THEN BEGIN
                                 memIntSII.NIF := PRO."CIF/NIF";
                                 memIntSII.RazonSocial := PRO.Nombre;
                                 memIntSII."Cod. pais" := PRO."C¢d. pa¡s";
                                 memIntSII."Cod. divisa" := PRO."C¢d. divisa";
                                 memIntSII."Tipo factura" := TipoFactura("Mov. IVA", 'COMPRA');
                                 IF FORMAT(memIntSII."Clave operacion") = COD_REAGP THEN
                                   memIntSII."Tipo factura" := 'F6';
                               END;

                               IF "Tipo documento" = "Tipo documento"::Factura THEN
                                 IF FCR.GET("N§ documento") THEN BEGIN
                                   memIntSII.NIF := FCR."CIF/NIF";
                                   memIntSII.RazonSocial := FCR."Pago a-Nombre";
                                   memIntSII."Cod. divisa" := FCR."C¢d. divisa";
                                   memIntSII."Factor divisa" := FCR."Factor divisa";
                                   memIntSII.NumTercero := FCR."Pago-a N§ proveedor";
                                   memIntSII.TextoRegistro := FCR."Texto de registro";
                                   memIntSII."Cod. pais" := FCR."Pago a-C¢d. pa¡s";
                                   memIntSII.DocumentoTercero := FCR."N§ factura proveedor";
                                   memIntSII."Fecha documento" := FCR."Fecha emisi¢n documento";
                                   memIntSII."Fecha operacion" := FCR."Fecha emisi¢n documento";
                                   memIntSII."Tipo factura" := TipoFactura("Mov. IVA", 'COMPRA');
                                   IF FORMAT(memIntSII."Clave operacion") = COD_REAGP THEN
                                     memIntSII."Tipo factura" := 'F6';

                                   IF CfgSII."Descripcion Factura compra" = CfgSII."Descripcion Factura compra"::"Primera linea documento" THEN BEGIN
                                     FCRLin.SETRANGE("N§ documento", FCR."N§");
                                     CASE CfgSII."Tipo l¡nea factura compra" OF
                                       CfgSII."Tipo l¡nea factura compra"::"Sin tipo ":
                                         FCRLin.SETRANGE(Tipo,0 );
                                       CfgSII."Tipo l¡nea factura compra"::"Con tipo":
                                         FCRLin.SETFILTER(Tipo,'>0' );
                                     END;
                                     IF CfgSII."Con cantidad en factura compra" THEN
                                       FCRLin.SETFILTER(Cantidad,'<>0');
                                     IF FCRLin.FIND('-') THEN
                                       memIntSII.TextoRegistro := FCRLin.Descripci¢n;
                                   END;
                                   IF CfgSII."Descripcion Factura compra" = CfgSII."Descripcion Factura compra"::"N§ documento proveedor" THEN
                                     memIntSII.TextoRegistro := 'N§ Documento ' + FCR."N§ factura proveedor";
                                 END;

                               IF "Tipo documento" = "Tipo documento"::Abono THEN
                                 IF ACR.GET("N§ documento") THEN BEGIN
                                   memIntSII.NIF := ACR."CIF/NIF";
                                   memIntSII.RazonSocial := ACR."Pago a-Nombre";
                                   memIntSII."Cod. divisa" := ACR."C¢d. divisa";
                                   memIntSII."Factor divisa" := ACR."Factor divisa";
                                   memIntSII.NumTercero := ACR."Pago-a N§ proveedor";
                                   memIntSII.TextoRegistro := ACR."Texto de registro";
                                   memIntSII."Cod. pais" := ACR."Pago a-C¢d. pa¡s";
                                   memIntSII.DocumentoTercero := ACR."N§ abono proveedor";
                                   memIntSII."Fecha documento" := ACR."Fecha emisi¢n documento";
                                   memIntSII."Fecha operacion" := ACR."Fecha emisi¢n documento";
                                   memIntSII."Tipo factura" := TipoFactura("Mov. IVA", 'COMPRA');
                                   memIntSII."Factura corregida" := ACR."Corrected Invoice No.";
                                   IF CfgSII."Descripcion Abono compra" = CfgSII."Descripcion Abono compra"::"Primera linea documento" THEN BEGIN
                                     ACRLin.SETRANGE("N§ documento", ACR."N§");
                                     CASE CfgSII."Tipo l¡nea abono compra" OF
                                       CfgSII."Tipo l¡nea abono compra"::"Sin tipo ":
                                         ACRLin.SETRANGE(Tipo,0 );
                                       CfgSII."Tipo l¡nea abono compra"::"Con tipo":
                                         ACRLin.SETFILTER(Tipo,'>0' );
                                     END;
                                     IF CfgSII."Con cantidad en abono compra" THEN
                                       ACRLin.SETFILTER(Cantidad,'<>0');
                                     IF ACRLin.FIND('-') THEN
                                       memIntSII.TextoRegistro := ACRLin.Descripci¢n;
                                   END;
                                   IF CfgSII."Descripcion Abono compra" = CfgSII."Descripcion Abono compra"::"N§ documento proveedor" THEN
                                     memIntSII.TextoRegistro := 'N§ Documento ' + ACR."N§ abono proveedor";
                                   IF (ACR."Corrected Invoice No." <> '') THEN BEGIN
                                     IF FCR.GET(ACR."Corrected Invoice No.") THEN BEGIN
                                       memIntSII."Tipo factura rectificativa" := 'I'; // Por diferencia
                                       IF memIntSII."Tipo factura" = 'F2' THEN
                                         memIntSII."Tipo factura" := 'R5'
                                       ELSE
                                         memIntSII."Tipo factura" := 'R4';
                                       memIntSII."Fecha factura corregida" := FCR."Fecha emisi¢n documento";
                                       memIntSII."Factura corregida" := FCR."N§ factura proveedor";
                                     END;
                                   END;
                                 END;

                               IF ("Tipo documento" = "Tipo documento"::Pago) OR
                                  ("Tipo documento" = "Tipo documento"::" ") THEN BEGIN
                                 memIntSII.TipoDocumento := memIntSII.TipoDocumento::Pago;
                                 memIntSII."Tipo factura" := '';
                                 IF "N§ mov. IVA no realizado" <> 0 THEN BEGIN
                                   IF MovIVAAux.GET("N§ mov. IVA no realizado") THEN BEGIN
                                     IF MovIVAAux."Tipo documento" = MovIVAAux."Tipo documento"::Factura THEN BEGIN
                                       IF FCR.GET(MovIVAAux."N§ documento") THEN BEGIN
                                         memIntSII.DocumentoTercero := FCR."N§ factura proveedor";
                                         memIntSII."Fecha documento" := FCR."Fecha emisi¢n documento";
                                         memIntSII."Fecha operacion" := FCR."Fecha emisi¢n documento";
                                         NumDoc := '';
                                         ComprobarREAGYP(memIntSII);
                                       END;
                                     END;
                                   END;
                                 END;
                               END;

                               // Comprobar si la serie est  en la configuraci¢n
                               BuscarSerie("Mov. IVA", memIntSII, 1);

                               IF memIntSII."Fecha documento" = 0D THEN
                                 memIntSII."Fecha documento" := memIntSII.Fecha;

                               IF memIntSII.DocumentoTercero = '' THEN
                                 memIntSII.DocumentoTercero := memIntSII.Documento;

                             END;

                               memIntSII.IDOtro := (memIntSII."Cod. pais" <> '') AND (memIntSII."Cod. pais" <> COD_ES);

                               IF memIntSII.TextoRegistro = '' THEN
                                 memIntSII.TextoRegistro := 'N§ Documento ' + memIntSII.Documento;

                               memIntSII.NIF := NormVATNumber(memIntSII.NIF, memIntSII.IDOtro, memIntSII."Cod. pais");

                               IF (memIntSII.NIF = '') AND memIntSII.IDOtro THEN BEGIN
                                 IF NOT FunXML.PaisUE(memIntSII."Cod. pais") THEN BEGIN
                                   memIntSII.NIF := memIntSII.NumTercero;
                                   IF memIntSII."Tipo factura" = 'F2' THEN
                                     memIntSII."Tipo factura" := 'F1';
                                   IF memIntSII."Tipo factura" = 'R5' THEN
                                     memIntSII."Tipo factura" := 'R4';
                                 END;
                               END;

                               CogerDatos("Mov. IVA", memIntSII);

                               // <--------------------------------------------------------- LLAMADA FUNCION PERSONALIZACIONES
                               GblSII.AntesPasarDocSII("Mov. IVA", memIntSII);
                               // <--------------------------------------------------------- LLAMADA FUNCION PERSONALIZACIONES
                               NMovDoc := FunCargaSII.CargarDocSII(memIntSII, TRUE);

                               // Buscar L¡neas con IVA NO SUJETO e insertarlas
                               InsertarNoSujeto(memIntSII);

                               gblTipoSII := memIntSII.TipoSII;

                           END ELSE BEGIN // S¢lo l¡neas
                             memIntSII.Tipo    := memIntSII.Tipo::Lineas;
                             memIntSII.TipoSII := gblTipoSII;
                             CogerDatos("Mov. IVA", memIntSII);
                           // <--------------------------------------------------------- LLAMADA FUNCION PERSONALIZACIONES
                             GblSII.AntesPasarLinDocSII("Mov. IVA", memIntSII);
                           // <--------------------------------------------------------- LLAMADA FUNCION PERSONALIZACIONES
                             FunCargaSII.CargarDocSII(memIntSII, TRUE);
                           END;
                         END;

        OnPostDataItem=BEGIN

                         ProcesNoSujetoTotal;
                         RefrescarNoSujeto;

                         ComprobarDUA(NMovDoc);

                         IF GUIALLOWED THEN
                           Vent.CLOSE;
                       END;

      }
      SECTIONS
      {
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=9570;
      Height=3410;
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      CfgSII@1000000016 : Record 88201;
      FunCargaSII@1000000000 : Codeunit 88204;
      memIntSII@1000000001 : Record 88202;
      NumDoc@1000000002 : Code[20];
      gblTipoSII@1000000030 : Integer;
      FVR@1000000003 : Record 112;
      FVRLin@1000000012 : Record 113;
      AVR@1000000004 : Record 114;
      AVRLin@1000000013 : Record 115;
      FCR@1000000005 : Record 122;
      FCRLin@1000000014 : Record 123;
      ACR@1000000006 : Record 124;
      ACRLin@1000000015 : Record 125;
      CLI@1000000007 : Record 18;
      PRO@1000000008 : Record 23;
      TabLinDocus@1000000009 : Record 88209;
      Series@1000000020 : Record 88206;
      qEmpresa@1000000010 : Text[30];
      GblSII@1000000011 : Codeunit 88200;
      Vent@1100288000 : Dialog;
      i@1100288001 : Integer;
      gblDesdeMov@1000000017 : Integer;
      gblHastaMov@1000000018 : Integer;
      COD_CRITERIO_CAJA@1000000019 : TextConst 'ESP=07';
      COD_ES@1100288002 : TextConst 'ESP=ES';
      DocIntEmitido@1000000023 : Record 304;
      DocIntEmitidoLin@1000000022 : Record 305;
      NMovDoc@1000000024 : Integer;
      GlbFunSII@1000000021 : Codeunit 88200;
      FechaProceso@1000000025 : Date;
      FunXML@1000000026 : Codeunit 88203;
      COD_REAGP@1000000027 : TextConst 'ESP=02';
      gblNumDoc@1000000028 : Integer;
      NumMovRefrescaNoSujeto@1000000029 : Integer;

    PROCEDURE CogerDatos@1000000014(MovIVa@1000000000 : Record 254;VAR mIntSII@1000000001 : Record 88202);
    BEGIN
      mIntSII."NMov IVA"                  := MovIVa."N§ mov.";
      mIntSII."Grupo registro IVA neg."   := MovIVa."Grupo registro IVA neg.";
      mIntSII."Grupo registro IVA prod."  := MovIVa."Grupo registro IVA prod.";
      mIntSII."Tipo IVA"                  := MovIVa."Tipo c lculo IVA";
      mIntSII."%IVA"                      := MovIVa."% IVA";
      mIntSII."%RE"                       := MovIVa."% RE";
      IF MovIVa.Tipo = MovIVa.Tipo::Venta THEN BEGIN
        mIntSII.BaseIVA                     := -MovIVa.Base;
        mIntSII."Importe no realizado"      := -MovIVa."Importe no realizado";
        mIntSII."Base no realizada"         := -MovIVa."Base no realizada";
        mIntSII.ImporteRE                   := CalcImpRE(MovIVa);
        mIntSII.ImporteIVA                  := -(MovIVa.Importe-mIntSII.ImporteRE);
        mIntSII.ImporteRE                   := -mIntSII.ImporteRE;
        mIntSII.OrigenImporteIVA            := mIntSII.ImporteIVA;
      END ELSE BEGIN
        mIntSII.BaseIVA                     := MovIVa.Base;
        mIntSII."Importe no realizado"      := MovIVa."Importe no realizado";
        mIntSII."Base no realizada"         := MovIVa."Base no realizada";
        mIntSII.ImporteRE                   := CalcImpRE(MovIVa);
        mIntSII.ImporteIVA                  := MovIVa.Importe-mIntSII.ImporteRE;
        mIntSII.OrigenImporteIVA            := mIntSII.ImporteIVA;
      END;

      memIntSII."NMov IVA no realizado"   := MovIVa."N§ mov. IVA no realizado";
      mIntSII."Inversion sujeto pasivo"   := CogerInvSujetoPasivo(mIntSII);
      mIntSII.Service                     := CogerServicios(mIntSII);
      mIntSII.DUA                         := CogerDUA(mIntSII);
      mIntSII."Causa exencion"            := CogerCausaExencion(mIntSII);
      mIntSII.Retencion                   := CogerRetencion(mIntSII);
      mIntSII."No enviar linea"           := CogerNoEnviarLinea(mIntSII);
      mIntSII."Tipo No Sujeto"            := CogerTipoNoSujeto(mIntSII);

      //>> IVA TOTAL
      IF (mIntSII.BaseIVA = 0) AND (mIntSII.OrigenImporteIVA <> 0) THEN
        IF mIntSII."%IVA" <> 0 THEN
          mIntSII.BaseIVA := ROUND(mIntSII.OrigenImporteIVA * 100 / mIntSII."%IVA", 0.01);
      //<< IVA TOTAL

      IF mIntSII.TipoSII = mIntSII.TipoSII::E THEN
        mIntSII."Criterio de IVA de caja"   := CogerIVACajaEmitidos(mIntSII)
      ELSE
        mIntSII."Criterio de IVA de caja"   := CogerIVACajaRecibidos(mIntSII);
      IF (mIntSII."Inversion sujeto pasivo") AND NOT mIntSII.IDOtro AND
         (mIntSII.TipoSII = mIntSII.TipoSII::E) THEN BEGIN
        mIntSII.Sujeta_NoExenta        := 'S2';
        mIntSII."%IVA"                 := 0;
        mIntSII."%RE"                  := 0;
        mIntSII.ImporteIVA             := 0;
        mIntSII.ImporteRE              := 0;
        mIntSII."Importe no realizado" := 0;
        mIntSII.OrigenImporteIVA       := 0;
      END;
    END;

    PROCEDURE CogerDatosDocumento@1000000013(MovIVa@1000000000 : Record 254;VAR mIntSII@1000000001 : Record 88202);
    BEGIN
      mIntSII."NMov IVA"                  := MovIVa."N§ mov.";
      mIntSII."Grupo registro IVA neg."   := MovIVa."Grupo registro IVA neg.";
      mIntSII."Grupo registro IVA prod."  := MovIVa."Grupo registro IVA prod.";
      mIntSII."Tipo IVA"                  := MovIVa."Tipo c lculo IVA";
      mIntSII."%IVA"                      := MovIVa."% IVA";
      mIntSII."%RE"                       := MovIVa."% RE";
      mIntSII.BaseIVA                     := MovIVa.Base;
      mIntSII."Importe no realizado"      := MovIVa."Importe no realizado";
      mIntSII."Base no realizada"         := MovIVa."Base no realizada";
      mIntSII.ImporteRE                   := CalcImpRE(MovIVa);
      mIntSII.ImporteIVA                  := MovIVa.Importe-mIntSII.ImporteRE;
      mIntSII.OrigenImporteIVA            := mIntSII.ImporteIVA;

      memIntSII."NMov IVA no realizado"   := MovIVa."N§ mov. IVA no realizado";
      mIntSII."Inversion sujeto pasivo"   := CogerInvSujetoPasivo(mIntSII);
      mIntSII.Service                     := CogerServicios(mIntSII);
      mIntSII.DUA                         := CogerDUA(mIntSII);
      mIntSII."Causa exencion"            := CogerCausaExencion(mIntSII);
      mIntSII.Retencion                   := CogerRetencion(mIntSII);
      mIntSII."No enviar linea"           := CogerNoEnviarLinea(mIntSII);
      mIntSII."Tipo No Sujeto"            := CogerTipoNoSujeto(mIntSII);

      //>> IVA TOTAL
      IF (mIntSII.BaseIVA = 0) AND (mIntSII.OrigenImporteIVA <> 0) THEN
        IF mIntSII."%IVA" <> 0 THEN
          mIntSII.BaseIVA := ROUND(mIntSII.OrigenImporteIVA * 100 / mIntSII."%IVA", 0.01);
      //<< IVA TOTAL

      IF mIntSII.TipoSII = mIntSII.TipoSII::E THEN
        mIntSII."Criterio de IVA de caja"   := CogerIVACajaEmitidos(mIntSII)
      ELSE
        mIntSII."Criterio de IVA de caja"   := CogerIVACajaRecibidos(mIntSII);
      IF (mIntSII."Inversion sujeto pasivo") AND NOT mIntSII.IDOtro AND
         (mIntSII.TipoSII = mIntSII.TipoSII::E) THEN BEGIN
        mIntSII.Sujeta_NoExenta        := 'S2';
        mIntSII."%IVA"                 := 0;
        mIntSII."%RE"                  := 0;
        mIntSII.ImporteIVA             := 0;
        mIntSII.ImporteRE              := 0;
        mIntSII."Importe no realizado" := 0;
        mIntSII.OrigenImporteIVA       := 0;
      END;
    END;

    PROCEDURE CalcImpRE@1000000000(VATEntry@1000000000 : Record 254) : Decimal;
    VAR
      Importe@1000000001 : Decimal;
    BEGIN
      // Recargo de equivalencia
      IF (VATEntry."% RE" <> 0) THEN
        Importe := (VATEntry.Base*VATEntry."% RE")/100
      ELSE
        Importe := 0;
      EXIT(Importe);
    END;

    PROCEDURE Sujeta@1000000025(MemFacturaE@1000000000 : TEMPORARY Record 88202) : Boolean;
    BEGIN
      EXIT(MemFacturaE."Tipo IVA" <> MemFacturaE."Tipo IVA"::"No sujeto");
    END;

    PROCEDURE SujetaNoExenta@1100013(MemFacturaE@1000000000 : TEMPORARY Record 88202) : Boolean;
    VAR
      FactVta@1100002 : Record 112;
      AboVta@1100001 : Record 114;
    BEGIN
      EXIT((MemFacturaE."Tipo IVA" = MemFacturaE."Tipo IVA"::Normal) OR
          (MemFacturaE."Tipo IVA" = MemFacturaE."Tipo IVA"::Reversi¢n));
    END;

    PROCEDURE SujetaExenta@1100016(MemFacturaE@1000000000 : TEMPORARY Record 88202) : Boolean;
    VAR
      FactVta@1100002 : Record 112;
      AboVta@1100001 : Record 114;
    BEGIN
      EXIT(MemFacturaE."Tipo IVA" = MemFacturaE."Tipo IVA"::Exento);
    END;

    PROCEDURE NoSujetaLocal@1000000024(MemFacturaE@1000000000 : TEMPORARY Record 88202) : Boolean;
    BEGIN
      EXIT(MemFacturaE."Clave operacion"=MemFacturaE."Clave operacion"::"08");
    END;

    PROCEDURE Get_CO_DocRecibido@1000000019(Tabla@1100000 : Record 254;VAR TextError@1100006 : Text[250]) : Integer;
    VAR
      Lin@1100001 : Record 254;
      ConfCruces@1100003 : Record 88207;
      HaySinConf@1100002 : Boolean;
      HayMasDeUno@1100007 : Boolean;
      Text10001@1100009 : TextConst 'ESP=No est  configurada la operaci¢n para alg£n cruce.';
      Text10002@1100008 : TextConst 'ESP=Hay m s de un c¢digo de operaci¢n posible.';
      CodOperacion@1000000000 : ' ,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15';
      AsigCorrecta@1000000001 : Boolean;
    BEGIN
      HaySinConf := FALSE;
      HayMasDeUno := FALSE;
      TextError := '';
      CodOperacion := CodOperacion::" ";

      Lin.RESET;

      qEmpresa := GblSII.GetGblEmpresa;
      IF qEmpresa <> '' THEN BEGIN
        Lin.CHANGECOMPANY(qEmpresa);
        ConfCruces.CHANGECOMPANY(qEmpresa);
      END;

      Lin.SETCURRENTKEY(Tipo,"Fecha registro","Tipo documento","N§ documento","N§ cliente/proveedor");
      Lin.SETRANGE(Tipo, Tabla.Tipo);
      Lin.SETRANGE("Fecha registro", Tabla."Fecha registro");
      Lin.SETRANGE("Tipo documento", Tabla."Tipo documento");
      Lin.SETRANGE("N§ documento", Tabla."N§ documento");
      Lin.SETRANGE("N§ cliente/proveedor", Tabla."N§ cliente/proveedor");
      IF Lin.FIND('-') THEN REPEAT
        IF NOT ConfCruces.GET(Lin."Grupo registro IVA neg.",Lin."Grupo registro IVA prod.") THEN
          ConfCruces.INIT;

        IF NOT ConfCruces.Retencion THEN BEGIN
          IF ConfCruces."C¢d. operacion recibidas" = ConfCruces."C¢d. operacion recibidas"::" " THEN
            HaySinConf := TRUE
          ELSE BEGIN
            IF (CodOperacion <> CodOperacion::" ") AND
               (CodOperacion <> ConfCruces."C¢d. operacion recibidas") AND
               (NOT ConfCruces.DUA) THEN
              HayMasDeUno := TRUE;
            IF (FORMAT(CodOperacion) = COD_CRITERIO_CAJA) OR
               (FORMAT(ConfCruces."C¢d. operacion recibidas") = COD_CRITERIO_CAJA) THEN BEGIN
              HayMasDeUno := FALSE;
              EVALUATE(CodOperacion, COD_CRITERIO_CAJA);
            END ELSE
              CodOperacion := ConfCruces."C¢d. operacion recibidas";
          END;
        END;

      UNTIL Lin.NEXT = 0;

      AsigCorrecta := (NOT HaySinConf) AND (NOT HayMasDeUno);
      IF NOT AsigCorrecta THEN
        CodOperacion := CodOperacion::" ";

      IF HaySinConf THEN
        TextError := Text10001;

      IF HayMasDeUno THEN
        TextError := TextError + ' ' + Text10002;

      EXIT(CodOperacion);
    END;

    PROCEDURE Get_CO_DocEmitido@1000000002(Tabla@1100000 : Record 254;VAR TextError@1100006 : Text[250]) : Integer;
    VAR
      Lin@1100001 : Record 254;
      ConfCruces@1100003 : Record 88207;
      HaySinConf@1100002 : Boolean;
      HayMasDeUno@1100007 : Boolean;
      Text10001@1100009 : TextConst 'ESP=No est  configurada la operaci¢n para alg£n cruce.';
      Text10002@1100008 : TextConst 'ESP=Hay m s de un c¢digo de operaci¢n posible.';
      CodOperacion@1000000001 : ' ,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15';
      AsigCorrecta@1000000000 : Boolean;
    BEGIN
      HaySinConf := FALSE;
      HayMasDeUno := FALSE;
      TextError := '';
      CodOperacion := CodOperacion::" ";

      Lin.RESET;

      qEmpresa := GblSII.GetGblEmpresa;
      IF qEmpresa <> '' THEN BEGIN
        Lin.CHANGECOMPANY(qEmpresa);
        ConfCruces.CHANGECOMPANY(qEmpresa);
      END;

      Lin.SETCURRENTKEY(Tipo,"Fecha registro","Tipo documento","N§ documento","N§ cliente/proveedor");
      Lin.SETRANGE(Tipo, Tabla.Tipo);
      Lin.SETRANGE("Fecha registro", Tabla."Fecha registro");
      Lin.SETRANGE("Tipo documento", Tabla."Tipo documento");
      Lin.SETRANGE("N§ documento", Tabla."N§ documento");
      Lin.SETRANGE("N§ cliente/proveedor", Tabla."N§ cliente/proveedor");
      IF Lin.FIND('-') THEN REPEAT
        IF NOT ConfCruces.GET(Lin."Grupo registro IVA neg.",Lin."Grupo registro IVA prod.") THEN
          ConfCruces.INIT;

        IF NOT ConfCruces.Retencion THEN BEGIN
          IF ConfCruces."C¢d. operacion emitidas" = ConfCruces."C¢d. operacion emitidas"::" " THEN
            HaySinConf := TRUE
          ELSE BEGIN
            IF (CodOperacion <> CodOperacion::" ") AND (CodOperacion <> ConfCruces."C¢d. operacion emitidas") THEN
              HayMasDeUno := TRUE;
            CodOperacion := ConfCruces."C¢d. operacion emitidas";
          END;
        END;

      UNTIL Lin.NEXT = 0;

      AsigCorrecta := (NOT HaySinConf) AND (NOT HayMasDeUno);
      IF NOT AsigCorrecta THEN
        CodOperacion := CodOperacion::" ";

      IF HaySinConf THEN
        TextError := Text10001;

      IF HayMasDeUno THEN
        TextError := TextError + ' ' + Text10002;

      EXIT(CodOperacion);
    END;

    PROCEDURE CogerInvSujetoPasivo@1000000001(mIntSII@1000000000 : Record 88202) : Boolean;
    VAR
      ConfCodOper@1000000001 : Record 88207;
    BEGIN
      qEmpresa := GblSII.GetGblEmpresa;
      IF (qEmpresa <> '') THEN
        ConfCodOper.CHANGECOMPANY(qEmpresa);
      ConfCodOper.SETRANGE("Grupo registro IVA neg.", mIntSII."Grupo registro IVA neg.");
      ConfCodOper.SETRANGE("Grupo registro IVA prod.", mIntSII."Grupo registro IVA prod.");
      IF ConfCodOper.FIND('-') THEN
        EXIT(ConfCodOper."Inversion sujeto pasivo")
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE CogerIVACajaEmitidos@1000000003(mIntSII@1000000000 : Record 88202) : Boolean;
    VAR
      ConfCodOper@1000000001 : Record 88207;
    BEGIN
      qEmpresa := GblSII.GetGblEmpresa;
      IF (qEmpresa <> '') THEN
        ConfCodOper.CHANGECOMPANY(qEmpresa);
      ConfCodOper.SETRANGE("Grupo registro IVA neg.", mIntSII."Grupo registro IVA neg.");
      ConfCodOper.SETRANGE("Grupo registro IVA prod.", mIntSII."Grupo registro IVA prod.");
      IF ConfCodOper.FIND('-') THEN
        EXIT(FORMAT(ConfCodOper."C¢d. operacion emitidas") = COD_CRITERIO_CAJA)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE CogerIVACajaRecibidos@1000000005(mIntSII@1000000000 : Record 88202) : Boolean;
    VAR
      ConfCodOper@1000000001 : Record 88207;
    BEGIN
      qEmpresa := GblSII.GetGblEmpresa;
      IF (qEmpresa <> '') THEN
        ConfCodOper.CHANGECOMPANY(qEmpresa);
      ConfCodOper.SETRANGE("Grupo registro IVA neg.", mIntSII."Grupo registro IVA neg.");
      ConfCodOper.SETRANGE("Grupo registro IVA prod.", mIntSII."Grupo registro IVA prod.");
      IF ConfCodOper.FIND('-') THEN
        EXIT(FORMAT(ConfCodOper."C¢d. operacion recibidas") = COD_CRITERIO_CAJA)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE CogerNoEnviar@1000000007(Tabla@1000000003 : Record 254) : Boolean;
    VAR
      Lin@1000000002 : Record 254;
      ConfCruces@1000000000 : Record 88207;
      NoEnviar@1000000001 : Boolean;
      i@1000000004 : Integer;
      Procesar@1000000005 : Boolean;
      esREAGYP@1000000006 : Boolean;
      esPago@1000000007 : Boolean;
    BEGIN
      qEmpresa := GblSII.GetGblEmpresa;
      IF qEmpresa <> '' THEN BEGIN
        Lin.CHANGECOMPANY(qEmpresa);
        ConfCruces.CHANGECOMPANY(qEmpresa);
      END;

      i := 0;
      NoEnviar := TRUE;
      Lin.SETCURRENTKEY(Tipo,"Fecha registro","Tipo documento","N§ documento","N§ cliente/proveedor");
      Lin.SETRANGE(Tipo, Tabla.Tipo);
      Lin.SETRANGE("Fecha registro", Tabla."Fecha registro");
      Lin.SETRANGE("Tipo documento", Tabla."Tipo documento");
      Lin.SETRANGE("N§ documento", Tabla."N§ documento");
      Lin.SETRANGE("N§ cliente/proveedor", Tabla."N§ cliente/proveedor");
      IF Lin.FIND('-') THEN REPEAT
        IF ConfCruces.GET(Lin."Grupo registro IVA neg.",Lin."Grupo registro IVA prod.") THEN BEGIN
          IF Tabla.Tipo = Tabla.Tipo::Compra THEN BEGIN
            esREAGYP := (FORMAT(ConfCruces."C¢d. operacion recibidas") = COD_REAGP);
            esPago   := (Tabla."Tipo documento" = Tabla."Tipo documento"::" ") OR
                        (Tabla."Tipo documento" = Tabla."Tipo documento"::Pago);
            Procesar := NOT (esREAGYP AND esPago);
            IF Procesar THEN BEGIN // Comprobar que no es factura REAGYP
              IF esREAGYP AND NOT esPago THEN BEGIN
                ConfCruces.CALCFIELDS("Tipo IVA no realizado");
                Procesar := FALSE;
                NoEnviar := NoEnviar AND (ConfCruces."Tipo IVA no realizado"=ConfCruces."Tipo IVA no realizado"::Porcentual);
                i := 1;
              END;
            END;
          END ELSE
            Procesar := TRUE;
          IF Procesar THEN BEGIN
            NoEnviar := NoEnviar AND ConfCruces."No enviar";
            i := i + 1;
          END;
        END;
      UNTIL (Lin.NEXT = 0) OR NOT NoEnviar;
      IF i = 0 THEN
        NoEnviar := FALSE;
      EXIT(NoEnviar);
    END;

    PROCEDURE CogerNoEnviarLinea@1000000028(mIntSII@1000000000 : Record 88202) : Boolean;
    VAR
      ConfCodOper@1000000001 : Record 88207;
    BEGIN
      qEmpresa := GblSII.GetGblEmpresa;
      IF (qEmpresa <> '') THEN
        ConfCodOper.CHANGECOMPANY(qEmpresa);
      ConfCodOper.SETRANGE("Grupo registro IVA neg.", mIntSII."Grupo registro IVA neg.");
      ConfCodOper.SETRANGE("Grupo registro IVA prod.", mIntSII."Grupo registro IVA prod.");
      IF ConfCodOper.FIND('-') THEN
        EXIT(ConfCodOper."No enviar")
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE CogerServicios@1000000009(mIntSII@1000000000 : Record 88202) : Boolean;
    VAR
      ConfCodOper@1000000001 : Record 88207;
    BEGIN
      qEmpresa := GblSII.GetGblEmpresa;
      IF (qEmpresa <> '') THEN
        ConfCodOper.CHANGECOMPANY(qEmpresa);
      ConfCodOper.SETRANGE("Grupo registro IVA neg.", mIntSII."Grupo registro IVA neg.");
      ConfCodOper.SETRANGE("Grupo registro IVA prod.", mIntSII."Grupo registro IVA prod.");
      IF ConfCodOper.FIND('-') THEN
        EXIT(ConfCodOper.Service)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE CogerDUA@1000000008(mIntSII@1000000000 : Record 88202) : Boolean;
    VAR
      ConfCodOper@1000000001 : Record 88207;
    BEGIN
      qEmpresa := GblSII.GetGblEmpresa;
      IF (qEmpresa <> '') THEN
        ConfCodOper.CHANGECOMPANY(qEmpresa);
      ConfCodOper.SETRANGE("Grupo registro IVA neg.", mIntSII."Grupo registro IVA neg.");
      ConfCodOper.SETRANGE("Grupo registro IVA prod.", mIntSII."Grupo registro IVA prod.");
      IF ConfCodOper.FIND('-') THEN
        EXIT(ConfCodOper.DUA)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE CogerCausaExencion@1000000011(mIntSII@1000000000 : Record 88202) : Code[10];
    VAR
      ConfCodOper@1000000001 : Record 88207;
    BEGIN
      qEmpresa := GblSII.GetGblEmpresa;
      IF (qEmpresa <> '') THEN
        ConfCodOper.CHANGECOMPANY(qEmpresa);
      ConfCodOper.SETRANGE("Grupo registro IVA neg.", mIntSII."Grupo registro IVA neg.");
      ConfCodOper.SETRANGE("Grupo registro IVA prod.", mIntSII."Grupo registro IVA prod.");
      IF ConfCodOper.FIND('-') THEN
        EXIT(FORMAT(ConfCodOper."Causa Exencion"))
      ELSE
        EXIT('');
    END;

    PROCEDURE CogerRetencion@1000000022(mIntSII@1000000000 : Record 88202) : Boolean;
    VAR
      ConfCodOper@1000000001 : Record 88207;
    BEGIN
      qEmpresa := GblSII.GetGblEmpresa;
      IF (qEmpresa <> '') THEN
        ConfCodOper.CHANGECOMPANY(qEmpresa);
      ConfCodOper.SETRANGE("Grupo registro IVA neg.", mIntSII."Grupo registro IVA neg.");
      ConfCodOper.SETRANGE("Grupo registro IVA prod.", mIntSII."Grupo registro IVA prod.");
      IF ConfCodOper.FIND('-') THEN
        EXIT(ConfCodOper.Retencion)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE CogerFechaCreacion@1000000029(Tabla@1000000002 : Record 254;NoSujeto@1000000000 : Boolean) : Date;
    VAR
      Tabla45@1000000001 : Record 45;
    BEGIN
      qEmpresa := GblSII.GetGblEmpresa;
      IF (qEmpresa <> '') THEN
        Tabla45.CHANGECOMPANY(qEmpresa);

      CASE CfgSII."Creation date" OF

       CfgSII."Creation date"::"Creation date in table 45":
         BEGIN
           Tabla45.SETCURRENTKEY("Fecha registro");
           Tabla45.SETRANGE("Fecha registro", Tabla."Fecha registro");
           Tabla45.SETFILTER("Desde n§ mov. IVA", '<=%1', Tabla."N§ mov.");
           Tabla45.SETFILTER("Hasta n§ mov. IVA", '>=%1', Tabla."N§ mov.");
           IF Tabla45.FIND('-') THEN
             EXIT(Tabla45."Fecha creaci¢n")
           ELSE
             EXIT(TODAY);
         END;
       CfgSII."Creation date"::"Transfer date to SII module":
         EXIT(TODAY);

      END;
    END;

    PROCEDURE CogerFechaDocumento@1000000034(Tabla@1000000002 : Record 254;Fecha@1000000000 : Date) : Date;
    VAR
      Tabla45@1000000001 : Record 45;
    BEGIN
      qEmpresa := GblSII.GetGblEmpresa;
      IF (qEmpresa <> '') THEN
        Tabla45.CHANGECOMPANY(qEmpresa);

      CASE CfgSII."Document date" OF

       CfgSII."Document date"::"Document date":
         EXIT(Fecha);
       CfgSII."Document date"::"Creation date in table 45":
         BEGIN
           Tabla45.SETCURRENTKEY("Fecha registro");
           Tabla45.SETRANGE("Fecha registro", Tabla."Fecha registro");
           Tabla45.SETFILTER("Desde n§ mov. IVA", '<=%1', Tabla."N§ mov.");
           Tabla45.SETFILTER("Hasta n§ mov. IVA", '>=%1', Tabla."N§ mov.");
           IF Tabla45.FIND('-') THEN
             EXIT(Tabla45."Fecha creaci¢n")
           ELSE
             EXIT(Fecha);
         END;
       CfgSII."Document date"::"Transfer date to SII module":
         EXIT(TODAY);

      END;
    END;

    PROCEDURE CogerTipoNoSujeto@1100288002(mIntSII@1000000000 : Record 88202) : Integer;
    VAR
      ConfCodOper@1000000001 : Record 88207;
    BEGIN
      qEmpresa := GblSII.GetGblEmpresa;
      IF (qEmpresa <> '') THEN
        ConfCodOper.CHANGECOMPANY(qEmpresa);
      ConfCodOper.SETRANGE("Grupo registro IVA neg.", mIntSII."Grupo registro IVA neg.");
      ConfCodOper.SETRANGE("Grupo registro IVA prod.", mIntSII."Grupo registro IVA prod.");
      IF ConfCodOper.FIND('-') THEN
        EXIT(ConfCodOper."Tipo No Sujeto")
      ELSE
        EXIT(0);
    END;

    PROCEDURE ComprobarDUA@1000000016(NMovDoc@1000000000 : Integer);
    VAR
      DocSII@1000000002 : Record 88208;
      LinDocSII@1000000001 : Record 88209;
      Duplicar@1000000003 : Boolean;
      NMovDocOriginal@1000000004 : Integer;
    BEGIN
      qEmpresa := GblSII.GetGblEmpresa;
      IF (qEmpresa <> '') THEN BEGIN
        DocSII.CHANGECOMPANY(qEmpresa);
        LinDocSII.CHANGECOMPANY(qEmpresa);
      END;

      NMovDocOriginal := NMovDoc;
      Duplicar := TRUE;
      IF DocSII.GET(NMovDoc) THEN BEGIN
        IF DocSII.TipoSII = DocSII.TipoSII::R THEN BEGIN
          LinDocSII.SETRANGE(NMovDoc, NMovDoc);
          IF LinDocSII.COUNT > 1 THEN BEGIN
            LinDocSII.SETRANGE(DUA, TRUE);
            IF LinDocSII.COUNT > 0 THEN BEGIN
              IF LinDocSII.FIND('-') THEN REPEAT
                // Duplicar el registro del Documento y mover estas l¡neas al nuevo registro
                IF Duplicar THEN BEGIN
                  NMovDoc := DuplicarDocSII(NMovDoc);
                  Duplicar := FALSE;
                END;
                MoverLinSII(LinDocSII, NMovDoc);
              UNTIL LinDocSII.NEXT = 0;
              // Compobar si con las l¡neas que quedan se debe marcar "No Enviar"
              ModDocSIINoEnviar(NMovDocOriginal);
            END;
          END ELSE BEGIN
            LinDocSII.SETRANGE(DUA, TRUE);
            IF LinDocSII.FIND('-') THEN BEGIN // Cambiar el Documento a DUA
              IF (LinDocSII.Base = 0) AND (LinDocSII.Cuota <> 0) THEN BEGIN // IVA Total
                IF LinDocSII."%IVA" <> 0 THEN BEGIN
                  LinDocSII.Base := ROUND(LinDocSII.Cuota * 100 / LinDocSII."%IVA", 0.01);
                  LinDocSII.MODIFY;
                END;
              END;
              DocSII."Factura DUA" := TRUE;
              DocSII."Tipo factura" := 'F5';
      //        DocSII.IDOtro := TRUE;
      // <--------------------------------------------------------- LLAMADA FUNCION PERSONALIZACIONES
              GblSII.AntesModificarDocSII_DUA(DocSII);
      // <--------------------------------------------------------- LLAMADA FUNCION PERSONALIZACIONES
              DocSII.MODIFY;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE DuplicarDocSII@1000000017(NMov@1000000000 : Integer) : Integer;
    VAR
      DocSII@1000000001 : Record 88208;
      AuxDocSII@1000000002 : Record 88208;
      NMovDoc@1000000003 : Integer;
      qInt@1000000004 : Integer;
    BEGIN
      qEmpresa := GblSII.GetGblEmpresa;
      IF (qEmpresa <> '') THEN BEGIN
        DocSII.CHANGECOMPANY(qEmpresa);
        AuxDocSII.CHANGECOMPANY(qEmpresa);
      END;

      IF DocSII.GET(NMov) THEN BEGIN
        AuxDocSII.FIND('+');
        NMovDoc := AuxDocSII.NMov + 1;
        AuxDocSII := DocSII;
        AuxDocSII.NMov := NMovDoc;
        AuxDocSII.NumTercero := '';
        AuxDocSII.NIF := '';
        AuxDocSII.RazonSocial := '';
        AuxDocSII."Factura DUA" := TRUE;
        AuxDocSII."Tipo factura" := 'F5';
      //  AuxDocSII.IDOtro := TRUE;
        GblSII.AntesDuplicarDocSII_DUA(DocSII, AuxDocSII);
        AuxDocSII.INSERT;
      //  EVALUATE(qInt, '01');
      //  DocSII."Clave operacion" := qInt;
      //  DocSII.MODIFY;
        EXIT(NMovDoc);
      END;
    END;

    PROCEDURE MoverLinSII@1000000021(pLinDocSII@1000000000 : Record 88209;NuevoNMov@1000000001 : Integer);
    VAR
      LinDocSII@1000000002 : Record 88209;
      mIntSII@1000000003 : Record 88202;
      DocSII@1000000004 : Record 88208;
    BEGIN
      IF (NuevoNMov = 0) OR (NuevoNMov = pLinDocSII.NMovDoc) THEN
        EXIT;
      qEmpresa := GblSII.GetGblEmpresa;
      IF (qEmpresa <> '') THEN BEGIN
        pLinDocSII.CHANGECOMPANY(qEmpresa);
        LinDocSII.CHANGECOMPANY(qEmpresa);
      END;

      LinDocSII := pLinDocSII;
      LinDocSII.NMovDoc := NuevoNMov;
      IF (LinDocSII.Base = 0) AND (LinDocSII.Cuota <> 0) THEN // IVA Total
        IF LinDocSII."%IVA" <> 0 THEN
          LinDocSII.Base := ROUND(LinDocSII.Cuota * 100 / LinDocSII."%IVA", 0.01);
      pLinDocSII.DELETE;
      // <--------------------------------------------------------- LLAMADA FUNCION PERSONALIZACIONES
      GblSII.AntesMoverLinDocSII_DUA(LinDocSII);
      // <--------------------------------------------------------- LLAMADA FUNCION PERSONALIZACIONES
      LinDocSII.INSERT;

      IF DocSII.GET(NuevoNMov) THEN BEGIN
        mIntSII."Grupo registro IVA neg."  := LinDocSII."Grupo registro IVA neg.";
        mIntSII."Grupo registro IVA prod." := LinDocSII."Grupo registro IVA prod.";
        DocSII."Clave operacion" := CogerCODUA(mIntSII);
      // <--------------------------------------------------------- LLAMADA FUNCION PERSONALIZACIONES
        GblSII.AntesModificarDocSII_DUA(DocSII);
      // <--------------------------------------------------------- LLAMADA FUNCION PERSONALIZACIONES
        DocSII.MODIFY;
      END;
    END;

    PROCEDURE CogerCODUA@1000000010(mIntSII@1000000000 : Record 88202) : Integer;
    VAR
      ConfCodOper@1000000001 : Record 88207;
    BEGIN
      qEmpresa := GblSII.GetGblEmpresa;
      IF (qEmpresa <> '') THEN
        ConfCodOper.CHANGECOMPANY(qEmpresa);
      ConfCodOper.SETRANGE("Grupo registro IVA neg.", mIntSII."Grupo registro IVA neg.");
      ConfCodOper.SETRANGE("Grupo registro IVA prod.", mIntSII."Grupo registro IVA prod.");
      IF ConfCodOper.FIND('-') THEN
        EXIT(ConfCodOper."C¢d. operacion recibidas")
      ELSE
        EXIT(0);
    END;

    PROCEDURE InsertarNoSujeto@1000000006(mIntSII@1000000000 : Record 88202);
    VAR
      FVLin@1000000004 : Record 113;
      AVLin@1000000003 : Record 115;
      FCLin@1000000002 : Record 123;
      ACLin@1000000001 : Record 125;
      MovIVA@1000000005 : Record 254;
    BEGIN
      WITH mIntSII DO BEGIN
        IF TipoSII = TipoSII::E THEN BEGIN
          IF "Tipo documento" = "Tipo documento"::Factura THEN BEGIN
            FVLin.SETRANGE("N§ documento", Documento);
            FVLin.SETFILTER(Cantidad, '<>%1', 0);
            FVLin.SETRANGE("Tipo c lculo IVA", FVLin."Tipo c lculo IVA"::"No sujeto");
            IF FVLin.FIND('-') THEN REPEAT
               MovIVA."Grupo registro IVA neg."  := FVLin."Grupo registro IVA neg.";
               MovIVA."Grupo registro IVA prod." := FVLin."Grupo registro IVA prod.";
               MovIVA."Tipo c lculo IVA"    := FVLin."Tipo c lculo IVA";
               MovIVA."% IVA"                   := FVLin."% IVA";
               MovIVA.Importe                    := FVLin."Importe IVA incl." - FVLin.Importe;
               MovIVA.Base                      := FVLin.Importe;
               IF mIntSII."Factor divisa" <> 0 THEN BEGIN
                 MovIVA.Base    := ROUND(MovIVA.Base / mIntSII."Factor divisa", 0.01);
                 MovIVA.Importe := ROUND(MovIVA.Importe / mIntSII."Factor divisa", 0.01);
               END;
               Tipo := mIntSII.Tipo::Lineas;
               CogerDatosDocumento(MovIVA, mIntSII);
      // <--------------------------------------------------------- LLAMADA FUNCION PERSONALIZACIONES
               GblSII.NS_FV_AntesPasarDocSII(MovIVA, mIntSII);
      // <--------------------------------------------------------- LLAMADA FUNCION PERSONALIZACIONES
               FunCargaSII.CargarDocSII(mIntSII, TRUE);
            UNTIL FVLin.NEXT = 0;
          END;
          IF "Tipo documento" = "Tipo documento"::Abono THEN BEGIN
            AVLin.SETRANGE("N§ documento", Documento);
            AVLin.SETFILTER(Cantidad, '<>%1', 0);
            AVLin.SETRANGE("Tipo c lculo IVA", AVLin."Tipo c lculo IVA"::"No sujeto");
            IF AVLin.FIND('-') THEN REPEAT
               MovIVA."Grupo registro IVA neg."  := AVLin."Grupo registro IVA neg.";
               MovIVA."Grupo registro IVA prod." := AVLin."Grupo registro IVA prod.";
               MovIVA."Tipo c lculo IVA"    := AVLin."Tipo c lculo IVA";
               MovIVA."% IVA"                   := AVLin."% IVA";
               MovIVA.Importe                    := -(AVLin."Importe IVA incl." - AVLin.Importe);
               MovIVA.Base                      := -AVLin.Importe;
               IF mIntSII."Factor divisa" <> 0 THEN BEGIN
                 MovIVA.Base    := ROUND(MovIVA.Base / mIntSII."Factor divisa", 0.01);
                 MovIVA.Importe := ROUND(MovIVA.Importe / mIntSII."Factor divisa", 0.01);
               END;
               Tipo := mIntSII.Tipo::Lineas;
               CogerDatosDocumento(MovIVA, mIntSII);
      // <--------------------------------------------------------- LLAMADA FUNCION PERSONALIZACIONES
               GblSII.NS_AV_AntesPasarDocSII(MovIVA, mIntSII);
      // <--------------------------------------------------------- LLAMADA FUNCION PERSONALIZACIONES
               FunCargaSII.CargarDocSII(mIntSII, TRUE);
            UNTIL AVLin.NEXT = 0;
          END;
        END ELSE BEGIN
          IF "Tipo documento" = "Tipo documento"::Factura THEN BEGIN
            FCLin.SETRANGE("N§ documento", Documento);
            FCLin.SETFILTER(Cantidad, '<>%1', 0);
            FCLin.SETRANGE("Tipo c lculo IVA", FCLin."Tipo c lculo IVA"::"No sujeto");
            IF FCLin.FIND('-') THEN REPEAT
               MovIVA."Grupo registro IVA neg."  := FCLin."Grupo registro IVA neg.";
               MovIVA."Grupo registro IVA prod." := FCLin."Grupo registro IVA prod.";
               MovIVA."Tipo c lculo IVA"    := FCLin."Tipo c lculo IVA";
               MovIVA."% IVA"                   := FCLin."% IVA";
               MovIVA.Importe                    := FCLin."Importe IVA incl." - FCLin.Importe;
               MovIVA.Base                      := FCLin.Importe;
               IF mIntSII."Factor divisa" <> 0 THEN BEGIN
                 MovIVA.Base    := ROUND(MovIVA.Base / mIntSII."Factor divisa", 0.01);
                 MovIVA.Importe := ROUND(MovIVA.Importe / mIntSII."Factor divisa", 0.01);
               END;
               Tipo := mIntSII.Tipo::Lineas;
               CogerDatosDocumento(MovIVA, mIntSII);
      // <--------------------------------------------------------- LLAMADA FUNCION PERSONALIZACIONES
               GblSII.NS_FC_AntesPasarDocSII(MovIVA, mIntSII);
      // <--------------------------------------------------------- LLAMADA FUNCION PERSONALIZACIONES
               FunCargaSII.CargarDocSII(mIntSII, TRUE);
            UNTIL FCLin.NEXT = 0;
          END;
          IF "Tipo documento" = "Tipo documento"::Abono THEN BEGIN
            ACLin.SETRANGE("N§ documento", Documento);
            ACLin.SETFILTER(Cantidad, '<>%1', 0);
            ACLin.SETRANGE("Tipo c lculo IVA", ACLin."Tipo c lculo IVA"::"No sujeto");
            IF ACLin.FIND('-') THEN REPEAT
               MovIVA."Grupo registro IVA neg."  := ACLin."Grupo registro IVA neg.";
               MovIVA."Grupo registro IVA prod." := ACLin."Grupo registro IVA prod.";
               MovIVA."Tipo c lculo IVA"    := ACLin."Tipo c lculo IVA";
               MovIVA."% IVA"                   := ACLin."% IVA";
               MovIVA.Importe                    := -(ACLin."Importe IVA incl." - ACLin.Importe);
               MovIVA.Base                      := -ACLin.Importe;
               IF mIntSII."Factor divisa" <> 0 THEN BEGIN
                 MovIVA.Base    := ROUND(MovIVA.Base / mIntSII."Factor divisa", 0.01);
                 MovIVA.Importe := ROUND(MovIVA.Importe / mIntSII."Factor divisa", 0.01);
               END;
               Tipo := mIntSII.Tipo::Lineas;
               CogerDatosDocumento(MovIVA, mIntSII);
      // <--------------------------------------------------------- LLAMADA FUNCION PERSONALIZACIONES
               GblSII.NS_AC_AntesPasarDocSII(MovIVA, mIntSII);
      // <--------------------------------------------------------- LLAMADA FUNCION PERSONALIZACIONES
               FunCargaSII.CargarDocSII(mIntSII, TRUE);
            UNTIL ACLin.NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE CambiarEmpresa@1100288001();
    BEGIN
      qEmpresa := GblSII.GetGblEmpresa;
      IF qEmpresa <> '' THEN BEGIN
        FVR.CHANGECOMPANY(qEmpresa);
        AVR.CHANGECOMPANY(qEmpresa);
        FCR.CHANGECOMPANY(qEmpresa);
        ACR.CHANGECOMPANY(qEmpresa);
        FVRLin.CHANGECOMPANY(qEmpresa);
        AVRLin.CHANGECOMPANY(qEmpresa);
        FCRLin.CHANGECOMPANY(qEmpresa);
        ACRLin.CHANGECOMPANY(qEmpresa);
        CLI.CHANGECOMPANY(qEmpresa);
        PRO.CHANGECOMPANY(qEmpresa);
        "Mov. IVA".CHANGECOMPANY(qEmpresa);
        TabLinDocus.CHANGECOMPANY(qEmpresa);
        CfgSII.CHANGECOMPANY(qEmpresa);
        DocIntEmitido.CHANGECOMPANY(qEmpresa);
        DocIntEmitidoLin.CHANGECOMPANY(qEmpresa);
        Series.CHANGECOMPANY(qEmpresa);
      END;
    END;

    PROCEDURE TipoFactura@1100288007(VATEntry@1100288000 : Record 254;pNIF@1000000000 : Code[20]) : Code[10];
    BEGIN
      // Hay que ver como obtenemos este dato
      IF pNIF = '' THEN
        EXIT('F2')
      ELSE
        EXIT('F1');
    END;

    PROCEDURE NormVATNumber@1100288000(VATNumber@1100288000 : Code[20];IDOtro@1100288001 : Boolean;CodPais@1000000000 : Code[10]) : Code[20];
    BEGIN
      VATNumber := DELCHR(VATNumber, '=', ' .,_-/\');
      IF NOT IDOtro THEN BEGIN
        IF COPYSTR(VATNumber,1, 2) = COD_ES THEN
          VATNumber := COPYSTR(VATNumber, 3);
      END ELSE BEGIN
        IF FunXML.PaisUE(CodPais) THEN BEGIN
          IF CodPais  = 'GR' THEN
            CodPais := 'EL';
          IF COPYSTR(VATNumber,1, 2) <> CodPais THEN
            VATNumber := CodPais + VATNumber;
        END;
      END;

      EXIT(VATNumber);
    END;

    PROCEDURE PasarParam@1000000004(pDesdeMov@1000000000 : Integer;pHastaMov@1000000001 : Integer);
    BEGIN
      gblDesdeMov := pDesdeMov;
      gblHastaMov := pHastaMov;
    END;

    PROCEDURE PasarDoc@1000000032(LocalDoc@1000000000 : Integer);
    BEGIN
      gblNumDoc := LocalDoc;
    END;

    PROCEDURE Combinaciones_CO@1000000012();
    BEGIN
    END;

    PROCEDURE IsPrefix@1000000015(Prefijo@1000000000 : Code[20];Valor@1000000001 : Code[50]) : Boolean;
    VAR
      i@1000000002 : Integer;
    BEGIN
      FOR i := 1 TO STRLEN(Prefijo) DO BEGIN
        IF COPYSTR(Prefijo, i, 1) <> COPYSTR(Valor, i, 1) THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE BuscarSerie@1000000026(MovIVA@1000000002 : Record 254;VAR memIntSII@1000000000 : Record 88202;Tipo@1000000003 : 'E,R');
    VAR
      Salir@1000000004 : Boolean;
      TipoSerie@1000000001 : Integer;
    BEGIN
      // Comprobar si la serie est  en la configuraci¢n de series
      CLEAR(Series);
      Series.SETRANGE("Tipo registro", Series."Tipo registro"::Series);
      Series.SETRANGE(Tipo, Tipo);
      Series.SETRANGE(Code, MovIVA."N§ serie");

      IF MovIVA."Tipo documento" = MovIVA."Tipo documento"::Factura THEN
        TipoSerie := 1;
      IF MovIVA."Tipo documento" = MovIVA."Tipo documento"::Abono THEN
        TipoSerie := 2;

      Series.SETRANGE("Tipo serie", TipoSerie);
      IF Series.FIND('-') THEN BEGIN
        PonerTipoSeries(Series, MovIVA, memIntSII);
        EXIT;
      END;

      Series.SETRANGE("Tipo serie", 0);
      IF Series.FIND('-') THEN BEGIN
        PonerTipoSeries(Series, MovIVA, memIntSII);
        EXIT;
      END;

      // Buscar si est  el prefijo
      Series.SETRANGE(Code);
      Series.SETRANGE("Tipo serie", TipoSerie);
      Series.SETRANGE("Es prefijo", TRUE);
      Salir := FALSE;
      IF Series.FIND('-') THEN REPEAT
         IF IsPrefix(Series.Code, MovIVA."N§ serie") THEN BEGIN
           PonerTipoSeries(Series, MovIVA, memIntSII);
           Salir := TRUE;
         END;
      UNTIL (Series.NEXT = 0) OR Salir;

      IF NOT Salir THEN BEGIN
        Series.SETRANGE("Tipo serie", 0);
        IF Series.FIND('-') THEN REPEAT
           IF IsPrefix(Series.Code, MovIVA."N§ serie") THEN BEGIN
             PonerTipoSeries(Series, MovIVA, memIntSII);
             Salir := TRUE;
           END;
        UNTIL (Series.NEXT = 0) OR Salir;
      END;
    END;

    PROCEDURE PonerTipoSeries@1000000035(Series@1000000002 : Record 88206;MovIVA@1000000001 : Record 254;VAR memIntSII@1000000000 : Record 88202);
    BEGIN
      IF Series."Tipo factura rectificativa" <> Series."Tipo factura rectificativa"::" " THEN BEGIN
        memIntSII."Tipo factura" := FORMAT(Series."Tipo factura rectificativa");
        memIntSII."Tipo factura rectificativa" := FORMAT(Series."Tipo rectificativa");
      END;
      IF Series."Tipo factura simplificada" <> Series."Tipo factura simplificada"::" " THEN BEGIN
        memIntSII."Tipo factura" := FORMAT(Series."Tipo factura simplificada");
        memIntSII."Tipo factura rectificativa" := '';
        memIntSII."Fecha factura corregida" := 0D;
      END;
    END;

    PROCEDURE BuscarCliente@1000000020(MovIVA@1000000002 : Record 254;VAR memIntSII@1000000000 : Record 88202);
    VAR
      Salir@1000000004 : Boolean;
    BEGIN
      // Comprobar si el cliente est  en la  configuraci¢n de clientes
      CLEAR(Series);
      Series.SETRANGE("Tipo registro", Series."Tipo registro"::Clientes);
      Series.SETRANGE(Code, MovIVA."N§ cliente/proveedor");
      IF Series.FIND('-') THEN BEGIN
        IF Series."Tipo factura simplificada" = Series."Tipo factura simplificada"::" " THEN
          Series."Tipo factura simplificada" := Series."Tipo factura simplificada"::F2;
        IF MovIVA."Tipo documento" = MovIVA."Tipo documento"::Abono THEN BEGIN
          memIntSII."Tipo factura" := 'R5';
          memIntSII."Tipo factura rectificativa" := 'I';
        END ELSE BEGIN
          memIntSII."Tipo factura" := FORMAT(Series."Tipo factura simplificada");
          memIntSII."Tipo factura rectificativa" := '';
          memIntSII."Fecha factura corregida" := 0D;
        END;
      END;
    END;

    PROCEDURE BuscarSerieExcluir@1000000033(MovIVA@1000000002 : Record 254;Tipo@1000000003 : 'E,R') : Boolean;
    VAR
      Salir@1000000004 : Boolean;
    BEGIN
      // Comprobar si la serie est  en la configuraci¢n de series para Excluir
      CLEAR(Series);
      Series.SETRANGE("Tipo registro", Series."Tipo registro"::Excluir);
      Series.SETRANGE(Tipo, Tipo);
      Series.SETRANGE(Code, MovIVA."N§ serie");
      EXIT(Series.FIND('-'))
    END;

    PROCEDURE ProcesNoSujetoTotal@1000000018();
    VAR
      LocalmIntSII@1000000007 : Record 88202;
      LocalConfCrucesIVA@1000000005 : Record 325;
      LocalConf@1000000000 : Record 88201;
      LocalMovCli@1000000001 : Record 21;
      LocalMovProv@1000000002 : Record 25;
      LocalMovIVA@1000000006 : Record 254;
      LocUltMov@1000000003 : Integer;
      LocFechaProceso@1000000004 : Date;
      NMovDoc@1000000008 : Integer;
      LocalFVR@1000000016 : Record 112;
      LocalAVR@1000000014 : Record 114;
      LocalFCR@1000000012 : Record 122;
      LocalACR@1000000010 : Record 124;
      LocalExisteDoc@1000000009 : Boolean;
    BEGIN
      IF qEmpresa <> '' THEN BEGIN
        LocalConfCrucesIVA.CHANGECOMPANY(qEmpresa);
        LocalMovIVA.CHANGECOMPANY(qEmpresa);
        LocalConf.CHANGECOMPANY(qEmpresa);
        LocalMovCli.CHANGECOMPANY(qEmpresa);
        LocalMovProv.CHANGECOMPANY(qEmpresa);
        LocalFVR.CHANGECOMPANY(qEmpresa);
        LocalAVR.CHANGECOMPANY(qEmpresa);
        LocalFCR.CHANGECOMPANY(qEmpresa);
        LocalACR.CHANGECOMPANY(qEmpresa);
      END;

      LocalConfCrucesIVA.RESET;
      LocalConfCrucesIVA.SETRANGE(LocalConfCrucesIVA."Tipo c lculo IVA",LocalConfCrucesIVA."Tipo c lculo IVA"::"No sujeto");
      IF NOT LocalConfCrucesIVA.FIND('-') THEN
        EXIT;

      LocalMovIVA.RESET;
      LocalMovIVA.SETCURRENTKEY(Tipo,"Fecha registro","Tipo documento","N§ documento","N§ cliente/proveedor");

      LocalConf.GET;
      LocalMovCli.RESET;
      LocalMovProv.RESET;

      IF LocalConf."Ult. mov. cli_prov proces" <> 0 THEN BEGIN
        LocUltMov := LocalConf."Ult. mov. cli_prov proces";
        LocalMovCli.SETFILTER("N§ mov.",'>=%1',LocalConf."Ult. mov. cli_prov proces");
        LocalMovProv.SETFILTER("N§ mov.",'>=%1',LocalConf."Ult. mov. cli_prov proces");
      END;

      IF LocalConf."No procesar 1S 2017" THEN
        LocFechaProceso := 010717D
      ELSE
        LocFechaProceso := 010117D;

      LocalMovCli.SETFILTER("Fecha registro", '>=%1', LocFechaProceso);
      LocalMovProv.SETFILTER("Fecha registro", '>=%1', LocFechaProceso);



      IF NumMovRefrescaNoSujeto <> 0 THEN BEGIN
        LocalMovCli.SETRANGE("N§ mov.",NumMovRefrescaNoSujeto);
        LocalMovProv.SETRANGE("N§ mov.",NumMovRefrescaNoSujeto);
      END;

      LocalMovCli.SETFILTER("Tipo documento",'%1|%2',LocalMovCli."Tipo documento"::Factura,LocalMovCli."Tipo documento"::Abono);
      LocalMovProv.SETFILTER("Tipo documento",'%1|%2',LocalMovCli."Tipo documento"::Factura,LocalMovCli."Tipo documento"::Abono);

      IF LocalMovCli.FIND('-') THEN REPEAT
        LocalExisteDoc := FALSE;

        IF (LocalMovCli."N§ mov." > LocUltMov) OR (NumMovRefrescaNoSujeto <> 0) THEN
          LocUltMov := LocalMovCli."N§ mov.";

          LocalMovIVA.INIT;
          LocalMovIVA.SETRANGE(Tipo,LocalMovIVA.Tipo::Venta);
          LocalMovIVA.SETRANGE("Fecha registro",LocalMovCli."Fecha registro");
          LocalMovIVA.SETRANGE("N§ documento",LocalMovCli."N§ documento");
          LocalMovIVA.SETRANGE("Tipo documento",LocalMovCli."Tipo documento");
          LocalMovIVA.SETRANGE("N§ cliente/proveedor",LocalMovCli."N§ cliente");

          CASE LocalMovCli."Tipo documento" OF
            LocalMovCli."Tipo documento"::Factura: BEGIN
                LocalExisteDoc := LocalFVR.GET(LocalMovCli."N§ documento");
                IF LocalExisteDoc THEN BEGIN
                  LocalMovIVA."N§ serie" := LocalFVR."N§ serie";
                  IF BuscarSerieExcluir(LocalMovIVA, 0) THEN
                    LocalExisteDoc := FALSE;
                END;
              END;
            LocalMovCli."Tipo documento"::Abono: BEGIN
                LocalExisteDoc := LocalAVR.GET(LocalMovCli."N§ documento");
                IF LocalExisteDoc THEN BEGIN
                  LocalMovIVA."N§ serie" := LocalAVR."N§ serie";
                  IF BuscarSerieExcluir(LocalMovIVA, 0) THEN
                    LocalExisteDoc := FALSE;
                END;
              END;
          END;

          // El documento no tiene IVA asociado por lo que tiene que ser completo no sujeto
          IF (NOT LocalMovIVA.FIND('-')) AND LocalExisteDoc THEN BEGIN
            LocalMovIVA.Tipo := LocalMovIVA.Tipo::Venta;
            LocalMovIVA."Fecha registro"       := LocalMovCli."Fecha registro";
            LocalMovIVA."N§ documento"         := LocalMovCli."N§ documento";
            LocalMovIVA."Tipo documento"       := LocalMovCli."Tipo documento";
            LocalMovIVA."N§ cliente/proveedor" := LocalMovCli."N§ cliente";

            LocalmIntSII.INIT;
            LocalmIntSII.TipoSII := LocalmIntSII.TipoSII::E;
            LocalmIntSII."Tipo documento" := LocalMovCli."Tipo documento";
            LocalmIntSII.Documento := LocalMovCli."N§ documento";
            LocalmIntSII.Fecha := LocalMovCli."Fecha registro";
            LocalmIntSII."Fecha documento" := LocalMovCli."Fecha emisi¢n documento";
            LocalmIntSII.NumTercero := LocalMovCli."N§ cliente";

            InsValoresNoSujeto(LocalmIntSII, LocalMovIVA);

            LocalmIntSII."Tipo IVA" := LocalmIntSII."Tipo IVA"::"No sujeto";
            NMovDoc := FunCargaSII.CargarDocSII(LocalmIntSII, TRUE);

            InsertarNoSujeto(LocalmIntSII);

            ModDocSIINoEnviar(NMovDoc);

          END;

      UNTIL LocalMovCli.NEXT = 0;

      IF LocalMovProv.FIND('-') THEN REPEAT
        LocalExisteDoc := FALSE;
        IF (LocalMovProv."N§ mov." > LocUltMov) OR (NumMovRefrescaNoSujeto <> 0) THEN
          LocUltMov := LocalMovProv."N§ mov.";

          LocalMovIVA.INIT;
          LocalMovIVA.SETRANGE(Tipo,LocalMovIVA.Tipo::Compra);
          LocalMovIVA.SETRANGE("Fecha registro",LocalMovProv."Fecha registro");
          LocalMovIVA.SETRANGE("N§ documento",LocalMovProv."N§ documento");
          LocalMovIVA.SETRANGE("Tipo documento",LocalMovProv."Tipo documento");
          LocalMovIVA.SETRANGE("N§ cliente/proveedor",LocalMovProv."N§ proveedor");

          CASE LocalMovProv."Tipo documento" OF
            LocalMovProv."Tipo documento"::Factura: BEGIN
                LocalExisteDoc := LocalFCR.GET(LocalMovProv."N§ documento");
                IF LocalExisteDoc THEN BEGIN
                  LocalMovIVA."N§ serie" := LocalFCR."N§ serie";
                  IF BuscarSerieExcluir(LocalMovIVA, 1) THEN
                    LocalExisteDoc := FALSE;
                END;
              END;
            LocalMovProv."Tipo documento"::Abono: BEGIN
                LocalExisteDoc := LocalACR.GET(LocalMovProv."N§ documento");
                IF LocalExisteDoc THEN BEGIN
                  LocalMovIVA."N§ serie" := LocalACR."N§ serie";
                  IF BuscarSerieExcluir(LocalMovIVA, 1) THEN
                    LocalExisteDoc := FALSE;
                END;
              END;
          END;

              // El documento no tiene IVA asociado por lo que tiene que ser completo no sujeto
          IF (NOT LocalMovIVA.FIND('-')) AND LocalExisteDoc THEN BEGIN
            LocalMovIVA.Tipo := LocalMovIVA.Tipo::Venta;
            LocalMovIVA."Fecha registro"       := LocalMovProv."Fecha registro";
            LocalMovIVA."N§ documento"         := LocalMovProv."N§ documento";
            LocalMovIVA."Tipo documento"       := LocalMovProv."Tipo documento";
            LocalMovIVA."N§ cliente/proveedor" := LocalMovProv."N§ proveedor";

            LocalmIntSII.INIT;
            LocalmIntSII.TipoSII := LocalmIntSII.TipoSII::R;
            LocalmIntSII."Tipo documento" := LocalMovProv."Tipo documento";
            LocalmIntSII.Documento := LocalMovProv."N§ documento";
            LocalmIntSII.Fecha := LocalMovProv."Fecha registro";
            LocalmIntSII."Fecha documento" := LocalMovProv."Fecha emisi¢n documento";
            LocalmIntSII.NumTercero := LocalMovProv."N§ proveedor";

            InsValoresNoSujeto(LocalmIntSII, LocalMovIVA);

            LocalmIntSII."Tipo IVA" := LocalmIntSII."Tipo IVA"::"No sujeto";
            NMovDoc := FunCargaSII.CargarDocSII(LocalmIntSII, TRUE);

            InsertarNoSujeto(LocalmIntSII);

            ModDocSIINoEnviar(NMovDoc);

          END;

      UNTIL LocalMovProv.NEXT = 0;

         // Si no est  refrescando se modifica
      IF NumMovRefrescaNoSujeto = 0 THEN BEGIN
        IF LocUltMov > LocalConf."Ult. mov. cli_prov proces" THEN BEGIN
          LocalConf."Ult. mov. cli_prov proces" := LocUltMov;
          LocalConf.MODIFY;
        END;
      END;
    END;

    PROCEDURE InsValoresNoSujeto@1000000023(VAR mIntSII@1000000000 : Record 88202;MovIVAAux@1000000001 : Record 254);
    VAR
      TxtError@1000000002 : Text[250];
    BEGIN
      // Vamos a poner los valores para la cabecera del documento.
      mIntSII."Fecha operacion" := mIntSII.Fecha;

      mIntSII."Creation date" := CogerFechaCreacion(MovIVAAux, TRUE);

      IF mIntSII.TipoSII = mIntSII.TipoSII::E THEN BEGIN
        IF TxtError <> '' THEN BEGIN
          mIntSII."Texto error" := TxtError;
          mIntSII."Codigo Error" := '-1';
        END;
        IF CLI.GET(mIntSII.NumTercero) THEN BEGIN
          mIntSII.NIF := CLI."CIF/NIF";
          mIntSII.RazonSocial := CLI.Nombre;
          mIntSII."Cod. pais" := CLI."C¢d. pa¡s";
          mIntSII."Cod. divisa" := CLI."C¢d. divisa";
          mIntSII."Tipo factura" := TipoFactura("Mov. IVA", mIntSII.NIF);
        END;
        IF mIntSII."Tipo documento" = mIntSII."Tipo documento"::Factura THEN BEGIN
          IF FVR.GET(mIntSII.Documento) THEN BEGIN
            mIntSII.NIF := FVR."CIF/NIF";
            mIntSII.RazonSocial := FVR."Fact. a-Nombre";
            mIntSII."Cod. divisa" := FVR."C¢d. divisa";
            mIntSII."Factor divisa" := FVR."Factor divisa";
            mIntSII.TextoRegistro := FVR."Texto de registro";
            mIntSII."Cod. pais" := FVR."Fact. a-C¢d. pa¡s";
            mIntSII."Tipo factura" := TipoFactura(MovIVAAux, mIntSII.NIF);

            IF CfgSII."Descripcion Factura venta" = CfgSII."Descripcion Factura venta"::"Primera linea documento" THEN BEGIN
              FVRLin.SETRANGE(FVRLin."N§ documento", FVR."N§");
              CASE CfgSII."Tipo l¡nea factura Venta" OF
                CfgSII."Tipo l¡nea factura Venta"::"Sin tipo ":
                  FVRLin.SETRANGE(Tipo,0 );
                CfgSII."Tipo l¡nea factura Venta"::"Con tipo":
                  FVRLin.SETFILTER(Tipo,'>0' );
              END;
              IF CfgSII."Con cantidad en factura venta" THEN
                FVRLin.SETFILTER(Cantidad,'<>0');
              IF FVRLin.FIND('-') THEN
                mIntSII.TextoRegistro := FVRLin.Descripci¢n;
            END;

            IF CfgSII."Descripcion Factura venta" = CfgSII."Descripcion Factura venta"::"N§ documento emitido" THEN
              mIntSII.TextoRegistro := 'N§ Documento ' + FVR."N§";

            // Coger CO
            FVRLin.SETRANGE("N§ documento", FVR."N§");
            FVRLin.SETRANGE(Tipo);
            FVRLin.SETFILTER(Cantidad,'<>0');
            IF FVRLin.FIND('-') THEN
              mIntSII."Clave operacion" := Get_CO_NoSujeto(mIntSII.TipoSII,
                                                           FVRLin."Grupo registro IVA neg.",
                                                           FVRLin."Grupo registro IVA prod.",
                                                           TxtError);
          END;
        END;
        IF mIntSII."Tipo documento" = mIntSII."Tipo documento"::Abono THEN BEGIN
          IF AVR.GET(mIntSII.Documento) THEN BEGIN
            mIntSII.NIF := AVR."CIF/NIF";
            mIntSII.RazonSocial := AVR."Fact. a-Nombre";
            mIntSII."Cod. divisa" := AVR."C¢d. divisa";
            mIntSII."Factor divisa" := AVR."Factor divisa";
            mIntSII.TextoRegistro := AVR."Texto de registro";
            mIntSII."Cod. pais" := AVR."Fact. a-C¢d. pa¡s";
            mIntSII."Tipo factura" := TipoFactura(MovIVAAux, mIntSII.NIF);

            IF CfgSII."Descripcion Abono venta" = CfgSII."Descripcion Abono venta"::"Primera linea documento" THEN BEGIN
              AVRLin.SETRANGE("N§ documento", AVR."N§");
              CASE CfgSII."Tipo l¡nea abono Venta" OF
                CfgSII."Tipo l¡nea abono Venta"::"Sin tipo ":
                  AVRLin.SETRANGE(Tipo,0 );
                CfgSII."Tipo l¡nea abono Venta"::"Con tipo":
                  AVRLin.SETFILTER(Tipo,'>0' );
              END;
              IF CfgSII."Con cantidad en abono venta" THEN
                AVRLin.SETFILTER(Cantidad,'<>0');
              IF AVRLin.FIND('-') THEN
                mIntSII.TextoRegistro := AVRLin.Descripci¢n;
            END;

            IF CfgSII."Descripcion Abono venta" = CfgSII."Descripcion Abono venta"::"N§ documento emitido" THEN
              mIntSII.TextoRegistro := 'N§ Documento ' + AVR."N§";

            // Coger CO
            AVRLin.SETRANGE("N§ documento", AVR."N§");
            AVRLin.SETRANGE(Tipo);
            AVRLin.SETFILTER(Cantidad,'<>0');
            IF AVRLin.FIND('-') THEN
              mIntSII."Clave operacion" := Get_CO_NoSujeto(mIntSII.TipoSII,
                                                           AVRLin."Grupo registro IVA neg.",
                                                           AVRLin."Grupo registro IVA prod.",
                                                           TxtError);

            mIntSII."Factura corregida" := AVR."Corrected Invoice No.";
            IF (AVR."Corrected Invoice No." <> '') THEN BEGIN
              IF FVR.GET(AVR."Corrected Invoice No.") THEN BEGIN
                mIntSII."Tipo factura rectificativa" := 'I'; // Por diferencia
                IF mIntSII."Tipo factura" = 'F2' THEN
                  mIntSII."Tipo factura" := 'R5'
                ELSE
                  mIntSII."Tipo factura" := 'R4';
                mIntSII."Fecha factura corregida" := FVR."Fecha registro";
              END;
            END;
          END;
        END;
      END;

      IF mIntSII.TipoSII = mIntSII.TipoSII::R THEN BEGIN
        IF TxtError <> '' THEN BEGIN
          mIntSII."Texto error" := TxtError;
          mIntSII."Codigo Error" := '-1';
        END;
        IF PRO.GET(mIntSII.NumTercero) THEN BEGIN
          mIntSII.NIF := PRO."CIF/NIF";
          mIntSII.RazonSocial := PRO.Nombre;
          mIntSII."Cod. pais" := PRO."C¢d. pa¡s";
          mIntSII."Cod. divisa" := PRO."C¢d. divisa";
          mIntSII."Tipo factura" := TipoFactura("Mov. IVA", mIntSII.NIF);
        END;
        IF mIntSII."Tipo documento" = mIntSII."Tipo documento"::Factura THEN BEGIN
          IF FCR.GET(mIntSII.Documento) THEN BEGIN
            mIntSII.NIF := FCR."CIF/NIF";
            mIntSII.RazonSocial := FCR."Pago a-Nombre";
            mIntSII."Cod. divisa" := FCR."C¢d. divisa";
            mIntSII."Factor divisa" := FCR."Factor divisa";
            mIntSII.TextoRegistro := FCR."Texto de registro";
            mIntSII."Cod. pais" := FCR."Pago a-C¢d. pa¡s";
            mIntSII.DocumentoTercero := FCR."N§ factura proveedor";
            mIntSII."Fecha documento" := FCR."Fecha emisi¢n documento";
            mIntSII."Fecha operacion" := FCR."Fecha emisi¢n documento";
            mIntSII."Tipo factura" := TipoFactura(MovIVAAux, 'COMPRA');

            IF CfgSII."Descripcion Factura compra" = CfgSII."Descripcion Factura compra"::"Primera linea documento" THEN BEGIN
              FCRLin.SETRANGE(FCRLin."N§ documento", FCR."N§");
              CASE CfgSII."Tipo l¡nea factura compra" OF
                CfgSII."Tipo l¡nea factura compra"::"Sin tipo ":
                  FCRLin.SETRANGE(Tipo,0 );
                CfgSII."Tipo l¡nea factura compra"::"Con tipo":
                  FCRLin.SETFILTER(Tipo,'>0' );
              END;
              IF CfgSII."Con cantidad en factura compra" THEN
                FCRLin.SETFILTER(Cantidad,'<>0');
              IF FCRLin.FIND('-') THEN
                mIntSII.TextoRegistro := FCRLin.Descripci¢n;
            END;

            IF CfgSII."Descripcion Factura compra" = CfgSII."Descripcion Factura compra"::"N§ documento proveedor" THEN
              mIntSII.TextoRegistro := 'N§ Documento ' + FCR."N§";

            // Coger CO
            FCRLin.SETRANGE("N§ documento", FCR."N§");
            FCRLin.SETRANGE(Tipo);
            FCRLin.SETFILTER(Cantidad,'<>0');
            IF FCRLin.FIND('-') THEN
              mIntSII."Clave operacion" := Get_CO_NoSujeto(mIntSII.TipoSII,
                                                           FCRLin."Grupo registro IVA neg.",
                                                           FCRLin."Grupo registro IVA prod.",
                                                           TxtError);

          END;
        END;
        IF mIntSII."Tipo documento" = mIntSII."Tipo documento"::Abono THEN BEGIN
          IF ACR.GET(mIntSII.Documento) THEN BEGIN
            mIntSII.NIF := ACR."CIF/NIF";
            mIntSII.RazonSocial := ACR."Pago a-Nombre";
            mIntSII."Cod. divisa" := ACR."C¢d. divisa";
            mIntSII."Factor divisa" := ACR."Factor divisa";
            mIntSII.TextoRegistro := ACR."Texto de registro";
            mIntSII."Cod. pais" := ACR."Pago a-C¢d. pa¡s";
            mIntSII.DocumentoTercero := ACR."N§ abono proveedor";
            mIntSII."Fecha documento" := ACR."Fecha emisi¢n documento";
            mIntSII."Fecha operacion" := ACR."Fecha emisi¢n documento";
            mIntSII."Tipo factura" := TipoFactura(MovIVAAux, 'COMPRA');

            IF CfgSII."Descripcion Abono venta" = CfgSII."Descripcion Abono compra"::"Primera linea documento" THEN BEGIN
              ACRLin.SETRANGE("N§ documento", ACR."N§");
              CASE CfgSII."Tipo l¡nea abono compra" OF
                CfgSII."Tipo l¡nea abono compra"::"Sin tipo ":
                  ACRLin.SETRANGE(Tipo,0 );
                CfgSII."Tipo l¡nea abono compra"::"Con tipo":
                  ACRLin.SETFILTER(Tipo,'>0' );
              END;
              IF CfgSII."Con cantidad en abono compra" THEN
                ACRLin.SETFILTER(Cantidad,'<>0');
              IF ACRLin.FIND('-') THEN
                mIntSII.TextoRegistro := ACRLin.Descripci¢n;
            END;

            IF CfgSII."Descripcion Abono compra" = CfgSII."Descripcion Abono compra"::"N§ documento proveedor" THEN
              mIntSII.TextoRegistro := 'N§ Documento ' + ACR."N§";

            // Coger CO
            ACRLin.SETRANGE("N§ documento", ACR."N§");
            ACRLin.SETRANGE(Tipo);
            ACRLin.SETFILTER(Cantidad,'<>0');
            IF ACRLin.FIND('-') THEN
              mIntSII."Clave operacion" := Get_CO_NoSujeto(mIntSII.TipoSII,
                                                           ACRLin."Grupo registro IVA neg.",
                                                           ACRLin."Grupo registro IVA prod.",
                                                           TxtError);

            mIntSII."Factura corregida" := ACR."Corrected Invoice No.";
            IF (ACR."Corrected Invoice No." <> '') THEN BEGIN
              IF FCR.GET(ACR."Corrected Invoice No.") THEN BEGIN
                mIntSII."Tipo factura rectificativa" := 'I'; // Por diferencia
                mIntSII."Tipo factura" := 'R4';
                mIntSII."Fecha factura corregida" := FCR."Fecha emisi¢n documento";
                mIntSII."Factura corregida" := FCR."N§ factura proveedor";
              END;
            END;
          END;
        END;
      END;

      IF memIntSII.TextoRegistro = '' THEN
        memIntSII.TextoRegistro := 'N§ Documento ' + memIntSII.Documento;

      memIntSII.IDOtro := (memIntSII."Cod. pais" <> '') AND (memIntSII."Cod. pais" <> 'ES');
      memIntSII.NIF := NormVATNumber(memIntSII.NIF, memIntSII.IDOtro, memIntSII."Cod. pais");

      IF TxtError <> '' THEN BEGIN
        mIntSII."Texto error" := TxtError;
        mIntSII."Codigo Error" := '-1';
      END;
    END;

    PROCEDURE Get_CO_NoSujeto@1000000027(Tipo@1000000000 : 'E,R';VATBusPostGroup@1000000001 : Code[20];VATProdPostGroup@1000000002 : Code[20];VAR TextErr@1000000003 : Text[100]) : Integer;
    VAR
      Text10001@1000000004 : TextConst 'ESP=No est  configurada la operaci¢n para alg£n cruce.';
      ConfCruces@1000000005 : Record 88207;
    BEGIN
      IF qEmpresa <> '' THEN
        ConfCruces.CHANGECOMPANY(qEmpresa);

      TextErr := '';

      IF ConfCruces.GET(VATBusPostGroup, VATProdPostGroup) THEN BEGIN
        IF Tipo = Tipo::E THEN
          EXIT(ConfCruces."C¢d. operacion emitidas")
        ELSE
          EXIT(ConfCruces."C¢d. operacion recibidas");
      END;
      TextErr := Text10001;
    END;

    PROCEDURE ModDocSIINoEnviar@1000000030(NMovDoc@1000000000 : Integer);
    VAR
      LocalLinDocSII@1000000001 : Record 88209;
      LocalDocSII@1000000002 : Record 88208;
      NoEnviar@1000000003 : Boolean;
    BEGIN
      IF qEmpresa <> '' THEN BEGIN
        LocalDocSII.CHANGECOMPANY(qEmpresa);
        LocalLinDocSII.CHANGECOMPANY(qEmpresa);
      END;

      IF LocalDocSII.GET(NMovDoc) THEN BEGIN
        NoEnviar := FALSE;
        LocalLinDocSII.SETCURRENTKEY(NMovDoc);
        LocalLinDocSII.SETRANGE(NMovDoc, NMovDoc);
        IF LocalLinDocSII.FIND('-') THEN BEGIN
          NoEnviar := TRUE;
          REPEAT
            NoEnviar := NoEnviar AND LocalLinDocSII."No enviar";
          UNTIL LocalLinDocSII.NEXT = 0;
         END;
         IF NoEnviar THEN BEGIN
            LocalDocSII."No enviar" := TRUE;
            LocalDocSII.MODIFY;
         END;
      END;
    END;

    PROCEDURE RefrescarNoSujeto@1000000031();
    VAR
      LocalDocSII@1000000000 : Record 88208;
      LocalMovCli@1000000006 : Record 21;
      LocalMovProv@1000000005 : Record 25;
    BEGIN
      IF (gblNumDoc <> 0) THEN BEGIN

        IF qEmpresa <> '' THEN BEGIN
          LocalMovCli.RESET;
          LocalMovProv.RESET;
          LocalMovCli.CHANGECOMPANY(qEmpresa);
          LocalMovProv.CHANGECOMPANY(qEmpresa);
          LocalDocSII.CHANGECOMPANY(qEmpresa);
        END;


        LocalMovProv.SETCURRENTKEY("N§ documento");
        LocalMovCli.SETCURRENTKEY("N§ documento");

        LocalMovCli.SETRANGE("Tipo documento",LocalMovCli."Tipo documento"::Factura,LocalMovCli."Tipo documento"::Abono);
        LocalMovProv.SETRANGE("Tipo documento",LocalMovCli."Tipo documento"::Factura,LocalMovCli."Tipo documento"::Abono);

        IF LocalDocSII.GET(gblNumDoc) THEN BEGIN
          CASE LocalDocSII.TipoSII OF
            LocalDocSII.TipoSII::E:
              BEGIN
                LocalMovCli.SETRANGE("N§ documento",LocalDocSII.Documento);
                LocalMovCli.SETRANGE("Fecha registro",LocalDocSII.Fecha);
                IF LocalMovCli.FIND('-') THEN BEGIN
                  NumMovRefrescaNoSujeto := LocalMovCli."N§ mov.";
                  ProcesNoSujetoTotal;
                END;

              END;
            LocalDocSII.TipoSII::R:
              BEGIN
                LocalMovProv.SETRANGE("N§ documento",LocalDocSII.Documento);
                LocalMovProv.SETRANGE("Fecha registro",LocalDocSII.Fecha);
                IF LocalMovProv.FIND('-') THEN BEGIN
                  NumMovRefrescaNoSujeto := LocalMovProv."N§ mov.";
                  ProcesNoSujetoTotal;
                END;
              END;
          END;
        END;
      END;

      NumMovRefrescaNoSujeto := 0;
    END;

    PROCEDURE "<---------------------"@1000000036();
    BEGIN
    END;

    PROCEDURE ComprobarREAGYP@1000000037(VAR mIntSII@1000000000 : Record 88202);
    VAR
      DocSII@1000000001 : Record 88208;
      qDocu@1000000002 : Text[35];
    BEGIN
      IF FORMAT(mIntSII."Clave operacion") = COD_REAGP THEN BEGIN
        mIntSII."Tipo factura"   := 'F6';
        mIntSII.TipoDocumento    := mIntSII.TipoDocumento::Factura;
        DocSII.SETCURRENTKEY(TipoSII, NumTercero, DocumentoPago);
        DocSII.SETRANGE(TipoSII, mIntSII.TipoSII);
        DocSII.SETRANGE(NumTercero, mIntSII.NumTercero);
        DocSII.SETRANGE(DocumentoPago, mIntSII.DocumentoTercero);
        IF DocSII.FIND('+') THEN
          qDocu := DocSII.DocumentoTercero
        ELSE
          qDocu := mIntSII.DocumentoTercero + '-000';
        mIntSII.DocumentoPago := mIntSII.DocumentoTercero;
        mIntSII.DocumentoTercero := INCSTR(qDocu);
      END;
    END;

    PROCEDURE FacturaREAGYP@1000000038(mIntSII@1000000000 : Record 88202) : Boolean;
    VAR
      DocSII@1000000001 : Record 88208;
      qDocu@1000000002 : Text[35];
    BEGIN
      EXIT((FORMAT(mIntSII."Clave operacion") = COD_REAGP) AND (TRUE));
    END;

    BEGIN
    {
      // Vamos a considerar que si el registor tiene un cruce de IVA que est  marcado como DUA y hya mas l¡neas en le d¢cumento
      // debemos generar un registro adicional en los Documentos SII del tipo Recibido y como Factura DUA, dejando el tercero en blanco

      // <--------------------------------------------------------- LLAMADA FUNCION PERSONALIZACIONES
        En estos puntos llamamos a funciones para las personalizaciones
    }
    END.
  }
}

